name: Build and Deploy to AKS

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Runner environment

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Java (Temurin JDK 17)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Change this to JDK 23 or another version if needed
          distribution: 'temurin'  # JDK distribution from Adoptium
          java-package: 'jdk'  # Use JDK, not JRE

      # Step 3: Build with Maven
      - name: Build with Maven
        run: mvn clean install  # This will generate the .jar file

      # Step 4: Verify that the JAR file is created
      - name: List target directory for verification
        run: ls -l target/  # Make sure the JAR file is in the target/ directory

      # Step 5: Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ramyaacr.azurecr.io  # Replace with your ACR login server
          username: ${{ secrets.ACR_USERNAME }}  # ACR username from secrets
          password: ${{ secrets.ACR_PASSWORD }}  # ACR password from secrets

      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)  # Get the short Git commit hash
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t ramyaacr.azurecr.io/adepuramya32/moon:$IMAGE_TAG . || exit 1
          docker push ramyaacr.azurecr.io/adepuramya32/moon:$IMAGE_TAG || exit 1  # Push the Docker image

  deploy:
    needs: build  # This job depends on the success of the build job
    runs-on: ubuntu-latest  # Runner environment

    steps:
      # Step 1: Set up kubectl to interact with AKS
      - name: Set up kubectl
        uses: azure/setup-kubectl@v2
        with:
          kubeconfig: ${{ secrets.AKS_KUBECONFIG }}  # AKS kubeconfig stored in secrets

      # Step 2: Deploy the application to AKS
      - name: Deploy to AKS
        run: |
          echo "Applying deployment and service YAML files"
          kubectl apply -f deployment.yaml || exit 1  # Deploy the application
          kubectl apply -f service.yaml || exit 1  # Deploy the service

      # Step 3: Check the deployment status
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          kubectl rollout status deployment/java-backend-deployment || exit 1  # Wait for successful rollout

